//
// Procedure Name:
//      brWeightsServerGetAllInfluences
//
// Description:
//      Collect the data of all current influences and return these
//      through the respective arrays.
//      Also, return a command string for rebuilding the current state
//      of influences.
//
// Input Arguments:
//      node            The name of the weights server node.
//      matrixPlugs     The list of connections for the influence
//                      matrix.
//      radiusValues    The list of radius values per influence index.
//      scaleValues     The list of scale values per influence index.
//      activeValues    The list of active values per influence index.
//      worldValues     The list of world values per influence index.
//      shapeValues     The list of useShape values per influence index.
//      matrixValues    The list of rest parent matrix values per
//                      influence index.
//      updateList      The list of current and new influences. If the
//                      list is empty all current influences will be
//                      included.
//      remove          If true, all current connections and attributes
//                      will be removed so that these can be later
//                      recreated in order.
//                      If false, only the data will be collected and
//                      the command returned.
//
// Return Value:
//      string          The command string to rebuild the current state
//                      of influences.
//
global proc string brWeightsServerGetAllInfluences( string $node,
                                                    string $matrixPlugs[],
                                                    float $radiusValues[],
                                                    float $scaleValues[],
                                                    int $activeValues[],
                                                    int $worldValues[],
                                                    int $shapeValues[],
                                                    string $matrixValues[],
                                                    string $updateList[],
                                                    int $remove )
{
    string $cmd;

    int $arrayCounter = 0;
    int $updateCount = size($updateList);

    int $indices[] = `getAttr -multiIndices ($node + ".influence")`;

    for ($i = 0; $i < size($indices); $i ++)
    {
        string $conn = `connectionInfo -sourceFromDestination
                                       ($node + ".influence[" + $indices[$i] + "].matrix")`;

        string $items[] = stringToStringArray($conn, ".");
        int $keep = stringArrayContains($items[0], $updateList);

        // Try to remove the current item from the update list.
        // This way only items remain in the list which haven't been
        // there before and will be added during the process.
        // This mainly exists to be able to call
        // brWeightsServerConnectInfluence with a list of influences
        // which will get processed based on whether they are already
        // connected or new influences. Existing items will remain, new
        // items will be added and missing items will get removed.
        $updateList = stringArrayRemove({$items[0]}, $updateList);

        // Continue if items should be kept or when the update list is
        // empty. Make sure that there is a connection in case of empty
        // indices.
        if ((($keep && $updateCount) || !$updateCount) && $conn != "")
        {
            $matrixPlugs[size($matrixPlugs)] = $conn;
            $radiusValues[size($radiusValues)] = `getAttr ($node + ".influence[" + $indices[$i] + "].radius")`;
            $scaleValues[size($scaleValues)] = `getAttr ($node + ".influence[" + $indices[$i] + "].scale")`;
            $activeValues[size($activeValues)] = `getAttr ($node + ".influence[" + $indices[$i] + "].active")`;
            $worldValues[size($worldValues)] = `getAttr ($node + ".influence[" + $indices[$i] + "].worldSpace")`;
            $shapeValues[size($shapeValues)] = `getAttr ($node + ".influence[" + $indices[$i] + "].useShape")`;

            float $mat[] = `getAttr ($node + ".influence[" + $indices[$i] + "].restParentMatrix")`;
            string $matrixStrings[];
            for ($j = 0; $j < size($mat); $j ++)
                $matrixStrings[$j] = $mat[$j];
            $matrixValues[size($matrixValues)] = stringArrayToString($matrixStrings, ",");

            $cmd += "connectAttr -force " + $matrixPlugs[$i] + " " + $node + ".influence[" + $i + "].matrix;\n";
            $cmd += "setAttr " + $node + ".influence[" + $i + "].radius " + $radiusValues[$i] + ";\n";
            $cmd += "setAttr " + $node + ".influence[" + $i + "].scale " + $scaleValues[$i] + ";\n";
            $cmd += "setAttr " + $node + ".influence[" + $i + "].active " + $activeValues[$i] + ";\n";
            $cmd += "setAttr " + $node + ".influence[" + $i + "].worldSpace " + $worldValues[$i] + ";\n";
            $cmd += "setAttr " + $node + ".influence[" + $i + "].useShape " + $shapeValues[$i] + ";\n";
            $cmd += ("setAttr " + $node + ".influence[" + $i + "].restParentMatrix -type \"matrix\" " +
                     stringArrayToString($matrixStrings, " ") + ";\n");
        }
        if ($remove)
            removeMultiInstance -break 1 ($node + ".influence[" + $indices[$i] + "]");
    }
    return $cmd;
}

// ---------------------------------------------------------------------
// MIT License
//
// Copyright (c) 2019 Ingo Clemens, brave rabbit
// rampWeights and weightsServer are under the terms of the MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Author: Ingo Clemens    www.braverabbit.com
// ---------------------------------------------------------------------
